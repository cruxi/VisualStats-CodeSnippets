<!-- TESTING VISUALIZATION -->
<h1>Path showing last 100 builds, their results and duration</h1>

<%= javascript_tag do %>
d3.json('<% @builds.to_json %>', 
            function(data){

            //console.log(data.line1, data.line2)
            
                var format = d3.time.format("%Y-%m-%dT%H:%M:%SZ");

                //parse time format correct
                data.forEach(function(d) {
                    console.log(d.finished_at);
                    d.finished_at = format.parse(d.finished_at);
                    console.log(d.finished_at);
                  });

             
              
                var margin = {top: 40, right: 40, bottom: 40, left: 40},
                width = 960,
                height = 800;

                var x = d3.time.scale()
                    .domain(d3.extent(data, function(d) { return d.finished_at; }))
                   .range([0, width - margin.right - margin.left]);

                var y1 = d3.scale.linear()
                    .domain(d3.extent(data, function(d) { return d.result; }))
                    .range([150, 0]);

                var y2 = d3.scale.linear()
                    .domain(d3.extent(data, function(d) { return d.duration; }))
                    .range([150, 0]);

                var xAxis = d3.svg.axis()
                    .scale(x)
                    .orient("bottom");

                var yAxis = d3.svg.axis()
                    .scale(y1)
                    .tickValues([1,2])
                    .ticks(1)
                    .orient("left");


                var yAxis2 = d3.svg.axis()
                    .scale(y2)
                    .ticks(10)
                    .orient("right");

                var line = d3.svg.line()
                    .interpolate("linear")
                    .x(function(d) { return x(d.finished_at); })
                    .y(function(d) { return y1(d.result); });
                    
                var line2 = d3.svg.line()
                    .interpolate("linear")
                    .x(function(d) { return x(d.finished_at); })
                    .y(function(d) { return y2(d.duration);});


                var svg = d3.select("body").append("svg")
                    .attr("width", width)
                    .attr("height", height)
                     .append("g")
                    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
     
                var elRoot = svg.selectAll("g")
                    .data(data)
                    .enter().append("g");


                elRoot.append("circle")
                    .attr("class", "dot")
                    .attr("cx", function(d) { return x(d.finished_at); })
                    .attr("cy", function(d) { console.log(d.result); return y1(d.result); })
                    .attr("r", 3)
                    .style({'fill':'green'})
                    .on("click", function(d,i) { alert("Builds Config : " + d.config); }); //click on circle point to see the config of that selected build

                elRoot.append("circle")
                    .attr("class", "dot")
                    .attr("cx", function(d) { return x(d.finished_at); })
                    .attr("cy", function(d) { console.log(d.duration); return y2(d.duration); })
                    .attr("r", 3)
                    .style({'fill':'red'})
                    .on("click", function(d,i) { alert("Builds Config : " + d.config); });
                    
          
                elRoot.append("path")
                    .attr("class", "line")
                    .style({'stroke':'green'})
                    .attr("d", line(data));

                elRoot.append("path")
                    .attr("class", "line")
                    .style({'stroke':'red'})
                    .attr("d", line2(data));


              
                svg.append("g") // Render the axis by calling a <g> selection.
                    .attr("transform", "translate(0," + y1.range()[0] + ")") //setzt x-achse an null punkt von y-achse
                    .attr("class", "x axis")
                    .call(xAxis)
                    .append("text")
                      .attr("transform", "translate(850)")
                      .attr("x", 8)
                      .attr("dx", "0.9em")
                      .style({'stroke':'black'})
                      .style("text-anchor", "end")
                      .text("Finished at");   

                svg.append("g")
                    .attr("class", "y axis axisLeft")
                    .call(yAxis)
                    .append("text")
                      .attr("transform", "translate(-5,0)")
                      .attr("y", 8)
                      .attr("dy", "0.9em")
                      .style({'stroke':'green'})
                      .style("text-anchor", "end")
                      .text("Result");
                
                svg.append("g")
                    .attr("class", "y axis axisRight")
                    .call(yAxis2)
                    .append("text")
                    .attr("transform","translate(850,100)")
                    .attr("y", 8)
                    .attr("dy", "0.9em")
                    .style({'stroke':'red'})
                    .style("text-anchor", "end")
                    .text("Duration");

                //mouse over graph
                //show the commit_id                
                d3.selectAll("circle")
                    .on('mouseover', function(d){
                        svg.append('text')
                        .attr("x", x(d.finished_at))
                        .attr("y1", y1(d.result))
                        .attr("y2", y2(d.duration))
                        .text(d.commit_id)
                        .attr('class','tip')
                        .style("font-size","1.5em")
                    })
                    .on('mouseout', function(d){
                        d3.selectAll(".tip").remove()
                    });              
            });     

<% end %>